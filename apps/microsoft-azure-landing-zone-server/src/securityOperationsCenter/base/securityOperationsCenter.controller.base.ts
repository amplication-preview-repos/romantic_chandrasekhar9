/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SecurityOperationsCenterService } from "../securityOperationsCenter.service";
import { SecurityOperationsCenterCreateInput } from "./SecurityOperationsCenterCreateInput";
import { SecurityOperationsCenter } from "./SecurityOperationsCenter";
import { SecurityOperationsCenterFindManyArgs } from "./SecurityOperationsCenterFindManyArgs";
import { SecurityOperationsCenterWhereUniqueInput } from "./SecurityOperationsCenterWhereUniqueInput";
import { SecurityOperationsCenterUpdateInput } from "./SecurityOperationsCenterUpdateInput";

export class SecurityOperationsCenterControllerBase {
  constructor(protected readonly service: SecurityOperationsCenterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SecurityOperationsCenter })
  async createSecurityOperationsCenter(
    @common.Body() data: SecurityOperationsCenterCreateInput
  ): Promise<SecurityOperationsCenter> {
    return await this.service.createSecurityOperationsCenter({
      data: {
        ...data,

        virtualNetwork: data.virtualNetwork
          ? {
              connect: data.virtualNetwork,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        monitoringTools: true,
        name: true,
        updatedAt: true,

        virtualNetwork: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SecurityOperationsCenter] })
  @ApiNestedQuery(SecurityOperationsCenterFindManyArgs)
  async securityOperationsCenters(
    @common.Req() request: Request
  ): Promise<SecurityOperationsCenter[]> {
    const args = plainToClass(
      SecurityOperationsCenterFindManyArgs,
      request.query
    );
    return this.service.securityOperationsCenters({
      ...args,
      select: {
        createdAt: true,
        id: true,
        monitoringTools: true,
        name: true,
        updatedAt: true,

        virtualNetwork: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SecurityOperationsCenter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async securityOperationsCenter(
    @common.Param() params: SecurityOperationsCenterWhereUniqueInput
  ): Promise<SecurityOperationsCenter | null> {
    const result = await this.service.securityOperationsCenter({
      where: params,
      select: {
        createdAt: true,
        id: true,
        monitoringTools: true,
        name: true,
        updatedAt: true,

        virtualNetwork: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SecurityOperationsCenter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSecurityOperationsCenter(
    @common.Param() params: SecurityOperationsCenterWhereUniqueInput,
    @common.Body() data: SecurityOperationsCenterUpdateInput
  ): Promise<SecurityOperationsCenter | null> {
    try {
      return await this.service.updateSecurityOperationsCenter({
        where: params,
        data: {
          ...data,

          virtualNetwork: data.virtualNetwork
            ? {
                connect: data.virtualNetwork,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          monitoringTools: true,
          name: true,
          updatedAt: true,

          virtualNetwork: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SecurityOperationsCenter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSecurityOperationsCenter(
    @common.Param() params: SecurityOperationsCenterWhereUniqueInput
  ): Promise<SecurityOperationsCenter | null> {
    try {
      return await this.service.deleteSecurityOperationsCenter({
        where: params,
        select: {
          createdAt: true,
          id: true,
          monitoringTools: true,
          name: true,
          updatedAt: true,

          virtualNetwork: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
