/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SecurityOperationsCenter } from "./SecurityOperationsCenter";
import { SecurityOperationsCenterCountArgs } from "./SecurityOperationsCenterCountArgs";
import { SecurityOperationsCenterFindManyArgs } from "./SecurityOperationsCenterFindManyArgs";
import { SecurityOperationsCenterFindUniqueArgs } from "./SecurityOperationsCenterFindUniqueArgs";
import { CreateSecurityOperationsCenterArgs } from "./CreateSecurityOperationsCenterArgs";
import { UpdateSecurityOperationsCenterArgs } from "./UpdateSecurityOperationsCenterArgs";
import { DeleteSecurityOperationsCenterArgs } from "./DeleteSecurityOperationsCenterArgs";
import { VirtualNetwork } from "../../virtualNetwork/base/VirtualNetwork";
import { SecurityOperationsCenterService } from "../securityOperationsCenter.service";
@graphql.Resolver(() => SecurityOperationsCenter)
export class SecurityOperationsCenterResolverBase {
  constructor(protected readonly service: SecurityOperationsCenterService) {}

  async _securityOperationsCentersMeta(
    @graphql.Args() args: SecurityOperationsCenterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SecurityOperationsCenter])
  async securityOperationsCenters(
    @graphql.Args() args: SecurityOperationsCenterFindManyArgs
  ): Promise<SecurityOperationsCenter[]> {
    return this.service.securityOperationsCenters(args);
  }

  @graphql.Query(() => SecurityOperationsCenter, { nullable: true })
  async securityOperationsCenter(
    @graphql.Args() args: SecurityOperationsCenterFindUniqueArgs
  ): Promise<SecurityOperationsCenter | null> {
    const result = await this.service.securityOperationsCenter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SecurityOperationsCenter)
  async createSecurityOperationsCenter(
    @graphql.Args() args: CreateSecurityOperationsCenterArgs
  ): Promise<SecurityOperationsCenter> {
    return await this.service.createSecurityOperationsCenter({
      ...args,
      data: {
        ...args.data,

        virtualNetwork: args.data.virtualNetwork
          ? {
              connect: args.data.virtualNetwork,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SecurityOperationsCenter)
  async updateSecurityOperationsCenter(
    @graphql.Args() args: UpdateSecurityOperationsCenterArgs
  ): Promise<SecurityOperationsCenter | null> {
    try {
      return await this.service.updateSecurityOperationsCenter({
        ...args,
        data: {
          ...args.data,

          virtualNetwork: args.data.virtualNetwork
            ? {
                connect: args.data.virtualNetwork,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SecurityOperationsCenter)
  async deleteSecurityOperationsCenter(
    @graphql.Args() args: DeleteSecurityOperationsCenterArgs
  ): Promise<SecurityOperationsCenter | null> {
    try {
      return await this.service.deleteSecurityOperationsCenter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => VirtualNetwork, {
    nullable: true,
    name: "virtualNetwork",
  })
  async getVirtualNetwork(
    @graphql.Parent() parent: SecurityOperationsCenter
  ): Promise<VirtualNetwork | null> {
    const result = await this.service.getVirtualNetwork(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
