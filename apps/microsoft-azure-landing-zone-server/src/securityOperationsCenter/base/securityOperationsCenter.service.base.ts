/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SecurityOperationsCenter as PrismaSecurityOperationsCenter,
  VirtualNetwork as PrismaVirtualNetwork,
} from "@prisma/client";

export class SecurityOperationsCenterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SecurityOperationsCenterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.securityOperationsCenter.count(args);
  }

  async securityOperationsCenters(
    args: Prisma.SecurityOperationsCenterFindManyArgs
  ): Promise<PrismaSecurityOperationsCenter[]> {
    return this.prisma.securityOperationsCenter.findMany(args);
  }
  async securityOperationsCenter(
    args: Prisma.SecurityOperationsCenterFindUniqueArgs
  ): Promise<PrismaSecurityOperationsCenter | null> {
    return this.prisma.securityOperationsCenter.findUnique(args);
  }
  async createSecurityOperationsCenter(
    args: Prisma.SecurityOperationsCenterCreateArgs
  ): Promise<PrismaSecurityOperationsCenter> {
    return this.prisma.securityOperationsCenter.create(args);
  }
  async updateSecurityOperationsCenter(
    args: Prisma.SecurityOperationsCenterUpdateArgs
  ): Promise<PrismaSecurityOperationsCenter> {
    return this.prisma.securityOperationsCenter.update(args);
  }
  async deleteSecurityOperationsCenter(
    args: Prisma.SecurityOperationsCenterDeleteArgs
  ): Promise<PrismaSecurityOperationsCenter> {
    return this.prisma.securityOperationsCenter.delete(args);
  }

  async getVirtualNetwork(
    parentId: string
  ): Promise<PrismaVirtualNetwork | null> {
    return this.prisma.securityOperationsCenter
      .findUnique({
        where: { id: parentId },
      })
      .virtualNetwork();
  }
}
