/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StorageAccountService } from "../storageAccount.service";
import { StorageAccountCreateInput } from "./StorageAccountCreateInput";
import { StorageAccount } from "./StorageAccount";
import { StorageAccountFindManyArgs } from "./StorageAccountFindManyArgs";
import { StorageAccountWhereUniqueInput } from "./StorageAccountWhereUniqueInput";
import { StorageAccountUpdateInput } from "./StorageAccountUpdateInput";
import { DatabaseFindManyArgs } from "../../database/base/DatabaseFindManyArgs";
import { Database } from "../../database/base/Database";
import { DatabaseWhereUniqueInput } from "../../database/base/DatabaseWhereUniqueInput";

export class StorageAccountControllerBase {
  constructor(protected readonly service: StorageAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StorageAccount })
  async createStorageAccount(
    @common.Body() data: StorageAccountCreateInput
  ): Promise<StorageAccount> {
    return await this.service.createStorageAccount({
      data: data,
      select: {
        accountType: true,
        createdAt: true,
        id: true,
        name: true,
        region: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StorageAccount] })
  @ApiNestedQuery(StorageAccountFindManyArgs)
  async storageAccounts(
    @common.Req() request: Request
  ): Promise<StorageAccount[]> {
    const args = plainToClass(StorageAccountFindManyArgs, request.query);
    return this.service.storageAccounts({
      ...args,
      select: {
        accountType: true,
        createdAt: true,
        id: true,
        name: true,
        region: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StorageAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async storageAccount(
    @common.Param() params: StorageAccountWhereUniqueInput
  ): Promise<StorageAccount | null> {
    const result = await this.service.storageAccount({
      where: params,
      select: {
        accountType: true,
        createdAt: true,
        id: true,
        name: true,
        region: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StorageAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStorageAccount(
    @common.Param() params: StorageAccountWhereUniqueInput,
    @common.Body() data: StorageAccountUpdateInput
  ): Promise<StorageAccount | null> {
    try {
      return await this.service.updateStorageAccount({
        where: params,
        data: data,
        select: {
          accountType: true,
          createdAt: true,
          id: true,
          name: true,
          region: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StorageAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStorageAccount(
    @common.Param() params: StorageAccountWhereUniqueInput
  ): Promise<StorageAccount | null> {
    try {
      return await this.service.deleteStorageAccount({
        where: params,
        select: {
          accountType: true,
          createdAt: true,
          id: true,
          name: true,
          region: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/databases")
  @ApiNestedQuery(DatabaseFindManyArgs)
  async findDatabases(
    @common.Req() request: Request,
    @common.Param() params: StorageAccountWhereUniqueInput
  ): Promise<Database[]> {
    const query = plainToClass(DatabaseFindManyArgs, request.query);
    const results = await this.service.findDatabases(params.id, {
      ...query,
      select: {
        createdAt: true,
        dbType: true,
        id: true,
        name: true,

        storageAccount: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/databases")
  async connectDatabases(
    @common.Param() params: StorageAccountWhereUniqueInput,
    @common.Body() body: DatabaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      databases: {
        connect: body,
      },
    };
    await this.service.updateStorageAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/databases")
  async updateDatabases(
    @common.Param() params: StorageAccountWhereUniqueInput,
    @common.Body() body: DatabaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      databases: {
        set: body,
      },
    };
    await this.service.updateStorageAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/databases")
  async disconnectDatabases(
    @common.Param() params: StorageAccountWhereUniqueInput,
    @common.Body() body: DatabaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      databases: {
        disconnect: body,
      },
    };
    await this.service.updateStorageAccount({
      where: params,
      data,
      select: { id: true },
    });
  }
}
