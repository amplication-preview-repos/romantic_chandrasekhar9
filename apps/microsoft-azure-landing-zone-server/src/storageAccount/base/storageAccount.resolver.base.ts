/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StorageAccount } from "./StorageAccount";
import { StorageAccountCountArgs } from "./StorageAccountCountArgs";
import { StorageAccountFindManyArgs } from "./StorageAccountFindManyArgs";
import { StorageAccountFindUniqueArgs } from "./StorageAccountFindUniqueArgs";
import { CreateStorageAccountArgs } from "./CreateStorageAccountArgs";
import { UpdateStorageAccountArgs } from "./UpdateStorageAccountArgs";
import { DeleteStorageAccountArgs } from "./DeleteStorageAccountArgs";
import { DatabaseFindManyArgs } from "../../database/base/DatabaseFindManyArgs";
import { Database } from "../../database/base/Database";
import { StorageAccountService } from "../storageAccount.service";
@graphql.Resolver(() => StorageAccount)
export class StorageAccountResolverBase {
  constructor(protected readonly service: StorageAccountService) {}

  async _storageAccountsMeta(
    @graphql.Args() args: StorageAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StorageAccount])
  async storageAccounts(
    @graphql.Args() args: StorageAccountFindManyArgs
  ): Promise<StorageAccount[]> {
    return this.service.storageAccounts(args);
  }

  @graphql.Query(() => StorageAccount, { nullable: true })
  async storageAccount(
    @graphql.Args() args: StorageAccountFindUniqueArgs
  ): Promise<StorageAccount | null> {
    const result = await this.service.storageAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StorageAccount)
  async createStorageAccount(
    @graphql.Args() args: CreateStorageAccountArgs
  ): Promise<StorageAccount> {
    return await this.service.createStorageAccount({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StorageAccount)
  async updateStorageAccount(
    @graphql.Args() args: UpdateStorageAccountArgs
  ): Promise<StorageAccount | null> {
    try {
      return await this.service.updateStorageAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StorageAccount)
  async deleteStorageAccount(
    @graphql.Args() args: DeleteStorageAccountArgs
  ): Promise<StorageAccount | null> {
    try {
      return await this.service.deleteStorageAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Database], { name: "databases" })
  async findDatabases(
    @graphql.Parent() parent: StorageAccount,
    @graphql.Args() args: DatabaseFindManyArgs
  ): Promise<Database[]> {
    const results = await this.service.findDatabases(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
