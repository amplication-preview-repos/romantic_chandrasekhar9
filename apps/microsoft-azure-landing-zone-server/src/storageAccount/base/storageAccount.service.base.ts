/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  StorageAccount as PrismaStorageAccount,
  Database as PrismaDatabase,
} from "@prisma/client";

export class StorageAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StorageAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.storageAccount.count(args);
  }

  async storageAccounts(
    args: Prisma.StorageAccountFindManyArgs
  ): Promise<PrismaStorageAccount[]> {
    return this.prisma.storageAccount.findMany(args);
  }
  async storageAccount(
    args: Prisma.StorageAccountFindUniqueArgs
  ): Promise<PrismaStorageAccount | null> {
    return this.prisma.storageAccount.findUnique(args);
  }
  async createStorageAccount(
    args: Prisma.StorageAccountCreateArgs
  ): Promise<PrismaStorageAccount> {
    return this.prisma.storageAccount.create(args);
  }
  async updateStorageAccount(
    args: Prisma.StorageAccountUpdateArgs
  ): Promise<PrismaStorageAccount> {
    return this.prisma.storageAccount.update(args);
  }
  async deleteStorageAccount(
    args: Prisma.StorageAccountDeleteArgs
  ): Promise<PrismaStorageAccount> {
    return this.prisma.storageAccount.delete(args);
  }

  async findDatabases(
    parentId: string,
    args: Prisma.DatabaseFindManyArgs
  ): Promise<PrismaDatabase[]> {
    return this.prisma.storageAccount
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .databases(args);
  }
}
