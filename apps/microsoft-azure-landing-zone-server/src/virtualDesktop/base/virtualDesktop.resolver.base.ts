/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VirtualDesktop } from "./VirtualDesktop";
import { VirtualDesktopCountArgs } from "./VirtualDesktopCountArgs";
import { VirtualDesktopFindManyArgs } from "./VirtualDesktopFindManyArgs";
import { VirtualDesktopFindUniqueArgs } from "./VirtualDesktopFindUniqueArgs";
import { CreateVirtualDesktopArgs } from "./CreateVirtualDesktopArgs";
import { UpdateVirtualDesktopArgs } from "./UpdateVirtualDesktopArgs";
import { DeleteVirtualDesktopArgs } from "./DeleteVirtualDesktopArgs";
import { VirtualNetwork } from "../../virtualNetwork/base/VirtualNetwork";
import { VirtualDesktopService } from "../virtualDesktop.service";
@graphql.Resolver(() => VirtualDesktop)
export class VirtualDesktopResolverBase {
  constructor(protected readonly service: VirtualDesktopService) {}

  async _virtualDesktopsMeta(
    @graphql.Args() args: VirtualDesktopCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VirtualDesktop])
  async virtualDesktops(
    @graphql.Args() args: VirtualDesktopFindManyArgs
  ): Promise<VirtualDesktop[]> {
    return this.service.virtualDesktops(args);
  }

  @graphql.Query(() => VirtualDesktop, { nullable: true })
  async virtualDesktop(
    @graphql.Args() args: VirtualDesktopFindUniqueArgs
  ): Promise<VirtualDesktop | null> {
    const result = await this.service.virtualDesktop(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VirtualDesktop)
  async createVirtualDesktop(
    @graphql.Args() args: CreateVirtualDesktopArgs
  ): Promise<VirtualDesktop> {
    return await this.service.createVirtualDesktop({
      ...args,
      data: {
        ...args.data,

        virtualNetwork: args.data.virtualNetwork
          ? {
              connect: args.data.virtualNetwork,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => VirtualDesktop)
  async updateVirtualDesktop(
    @graphql.Args() args: UpdateVirtualDesktopArgs
  ): Promise<VirtualDesktop | null> {
    try {
      return await this.service.updateVirtualDesktop({
        ...args,
        data: {
          ...args.data,

          virtualNetwork: args.data.virtualNetwork
            ? {
                connect: args.data.virtualNetwork,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VirtualDesktop)
  async deleteVirtualDesktop(
    @graphql.Args() args: DeleteVirtualDesktopArgs
  ): Promise<VirtualDesktop | null> {
    try {
      return await this.service.deleteVirtualDesktop(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => VirtualNetwork, {
    nullable: true,
    name: "virtualNetwork",
  })
  async getVirtualNetwork(
    @graphql.Parent() parent: VirtualDesktop
  ): Promise<VirtualNetwork | null> {
    const result = await this.service.getVirtualNetwork(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
