/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VirtualDesktop as PrismaVirtualDesktop,
  VirtualNetwork as PrismaVirtualNetwork,
} from "@prisma/client";

export class VirtualDesktopServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VirtualDesktopCountArgs, "select">
  ): Promise<number> {
    return this.prisma.virtualDesktop.count(args);
  }

  async virtualDesktops(
    args: Prisma.VirtualDesktopFindManyArgs
  ): Promise<PrismaVirtualDesktop[]> {
    return this.prisma.virtualDesktop.findMany(args);
  }
  async virtualDesktop(
    args: Prisma.VirtualDesktopFindUniqueArgs
  ): Promise<PrismaVirtualDesktop | null> {
    return this.prisma.virtualDesktop.findUnique(args);
  }
  async createVirtualDesktop(
    args: Prisma.VirtualDesktopCreateArgs
  ): Promise<PrismaVirtualDesktop> {
    return this.prisma.virtualDesktop.create(args);
  }
  async updateVirtualDesktop(
    args: Prisma.VirtualDesktopUpdateArgs
  ): Promise<PrismaVirtualDesktop> {
    return this.prisma.virtualDesktop.update(args);
  }
  async deleteVirtualDesktop(
    args: Prisma.VirtualDesktopDeleteArgs
  ): Promise<PrismaVirtualDesktop> {
    return this.prisma.virtualDesktop.delete(args);
  }

  async getVirtualNetwork(
    parentId: string
  ): Promise<PrismaVirtualNetwork | null> {
    return this.prisma.virtualDesktop
      .findUnique({
        where: { id: parentId },
      })
      .virtualNetwork();
  }
}
