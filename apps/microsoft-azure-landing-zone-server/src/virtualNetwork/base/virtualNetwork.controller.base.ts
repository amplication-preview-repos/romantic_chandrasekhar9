/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VirtualNetworkService } from "../virtualNetwork.service";
import { VirtualNetworkCreateInput } from "./VirtualNetworkCreateInput";
import { VirtualNetwork } from "./VirtualNetwork";
import { VirtualNetworkFindManyArgs } from "./VirtualNetworkFindManyArgs";
import { VirtualNetworkWhereUniqueInput } from "./VirtualNetworkWhereUniqueInput";
import { VirtualNetworkUpdateInput } from "./VirtualNetworkUpdateInput";
import { SecurityOperationsCenterFindManyArgs } from "../../securityOperationsCenter/base/SecurityOperationsCenterFindManyArgs";
import { SecurityOperationsCenter } from "../../securityOperationsCenter/base/SecurityOperationsCenter";
import { SecurityOperationsCenterWhereUniqueInput } from "../../securityOperationsCenter/base/SecurityOperationsCenterWhereUniqueInput";
import { VirtualDesktopFindManyArgs } from "../../virtualDesktop/base/VirtualDesktopFindManyArgs";
import { VirtualDesktop } from "../../virtualDesktop/base/VirtualDesktop";
import { VirtualDesktopWhereUniqueInput } from "../../virtualDesktop/base/VirtualDesktopWhereUniqueInput";

export class VirtualNetworkControllerBase {
  constructor(protected readonly service: VirtualNetworkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VirtualNetwork })
  async createVirtualNetwork(
    @common.Body() data: VirtualNetworkCreateInput
  ): Promise<VirtualNetwork> {
    return await this.service.createVirtualNetwork({
      data: data,
      select: {
        addressSpace: true,
        createdAt: true,
        id: true,
        name: true,
        region: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VirtualNetwork] })
  @ApiNestedQuery(VirtualNetworkFindManyArgs)
  async virtualNetworks(
    @common.Req() request: Request
  ): Promise<VirtualNetwork[]> {
    const args = plainToClass(VirtualNetworkFindManyArgs, request.query);
    return this.service.virtualNetworks({
      ...args,
      select: {
        addressSpace: true,
        createdAt: true,
        id: true,
        name: true,
        region: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VirtualNetwork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async virtualNetwork(
    @common.Param() params: VirtualNetworkWhereUniqueInput
  ): Promise<VirtualNetwork | null> {
    const result = await this.service.virtualNetwork({
      where: params,
      select: {
        addressSpace: true,
        createdAt: true,
        id: true,
        name: true,
        region: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VirtualNetwork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVirtualNetwork(
    @common.Param() params: VirtualNetworkWhereUniqueInput,
    @common.Body() data: VirtualNetworkUpdateInput
  ): Promise<VirtualNetwork | null> {
    try {
      return await this.service.updateVirtualNetwork({
        where: params,
        data: data,
        select: {
          addressSpace: true,
          createdAt: true,
          id: true,
          name: true,
          region: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VirtualNetwork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVirtualNetwork(
    @common.Param() params: VirtualNetworkWhereUniqueInput
  ): Promise<VirtualNetwork | null> {
    try {
      return await this.service.deleteVirtualNetwork({
        where: params,
        select: {
          addressSpace: true,
          createdAt: true,
          id: true,
          name: true,
          region: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/securityOperationsCenters")
  @ApiNestedQuery(SecurityOperationsCenterFindManyArgs)
  async findSecurityOperationsCenters(
    @common.Req() request: Request,
    @common.Param() params: VirtualNetworkWhereUniqueInput
  ): Promise<SecurityOperationsCenter[]> {
    const query = plainToClass(
      SecurityOperationsCenterFindManyArgs,
      request.query
    );
    const results = await this.service.findSecurityOperationsCenters(
      params.id,
      {
        ...query,
        select: {
          createdAt: true,
          id: true,
          monitoringTools: true,
          name: true,
          updatedAt: true,

          virtualNetwork: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/securityOperationsCenters")
  async connectSecurityOperationsCenters(
    @common.Param() params: VirtualNetworkWhereUniqueInput,
    @common.Body() body: SecurityOperationsCenterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      securityOperationsCenters: {
        connect: body,
      },
    };
    await this.service.updateVirtualNetwork({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/securityOperationsCenters")
  async updateSecurityOperationsCenters(
    @common.Param() params: VirtualNetworkWhereUniqueInput,
    @common.Body() body: SecurityOperationsCenterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      securityOperationsCenters: {
        set: body,
      },
    };
    await this.service.updateVirtualNetwork({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/securityOperationsCenters")
  async disconnectSecurityOperationsCenters(
    @common.Param() params: VirtualNetworkWhereUniqueInput,
    @common.Body() body: SecurityOperationsCenterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      securityOperationsCenters: {
        disconnect: body,
      },
    };
    await this.service.updateVirtualNetwork({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/virtualDesktops")
  @ApiNestedQuery(VirtualDesktopFindManyArgs)
  async findVirtualDesktops(
    @common.Req() request: Request,
    @common.Param() params: VirtualNetworkWhereUniqueInput
  ): Promise<VirtualDesktop[]> {
    const query = plainToClass(VirtualDesktopFindManyArgs, request.query);
    const results = await this.service.findVirtualDesktops(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        osType: true,
        updatedAt: true,

        virtualNetwork: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/virtualDesktops")
  async connectVirtualDesktops(
    @common.Param() params: VirtualNetworkWhereUniqueInput,
    @common.Body() body: VirtualDesktopWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      virtualDesktops: {
        connect: body,
      },
    };
    await this.service.updateVirtualNetwork({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/virtualDesktops")
  async updateVirtualDesktops(
    @common.Param() params: VirtualNetworkWhereUniqueInput,
    @common.Body() body: VirtualDesktopWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      virtualDesktops: {
        set: body,
      },
    };
    await this.service.updateVirtualNetwork({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/virtualDesktops")
  async disconnectVirtualDesktops(
    @common.Param() params: VirtualNetworkWhereUniqueInput,
    @common.Body() body: VirtualDesktopWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      virtualDesktops: {
        disconnect: body,
      },
    };
    await this.service.updateVirtualNetwork({
      where: params,
      data,
      select: { id: true },
    });
  }
}
