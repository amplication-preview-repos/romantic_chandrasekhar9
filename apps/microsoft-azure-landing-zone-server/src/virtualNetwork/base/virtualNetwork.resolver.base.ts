/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VirtualNetwork } from "./VirtualNetwork";
import { VirtualNetworkCountArgs } from "./VirtualNetworkCountArgs";
import { VirtualNetworkFindManyArgs } from "./VirtualNetworkFindManyArgs";
import { VirtualNetworkFindUniqueArgs } from "./VirtualNetworkFindUniqueArgs";
import { CreateVirtualNetworkArgs } from "./CreateVirtualNetworkArgs";
import { UpdateVirtualNetworkArgs } from "./UpdateVirtualNetworkArgs";
import { DeleteVirtualNetworkArgs } from "./DeleteVirtualNetworkArgs";
import { SecurityOperationsCenterFindManyArgs } from "../../securityOperationsCenter/base/SecurityOperationsCenterFindManyArgs";
import { SecurityOperationsCenter } from "../../securityOperationsCenter/base/SecurityOperationsCenter";
import { VirtualDesktopFindManyArgs } from "../../virtualDesktop/base/VirtualDesktopFindManyArgs";
import { VirtualDesktop } from "../../virtualDesktop/base/VirtualDesktop";
import { VirtualNetworkService } from "../virtualNetwork.service";
@graphql.Resolver(() => VirtualNetwork)
export class VirtualNetworkResolverBase {
  constructor(protected readonly service: VirtualNetworkService) {}

  async _virtualNetworksMeta(
    @graphql.Args() args: VirtualNetworkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VirtualNetwork])
  async virtualNetworks(
    @graphql.Args() args: VirtualNetworkFindManyArgs
  ): Promise<VirtualNetwork[]> {
    return this.service.virtualNetworks(args);
  }

  @graphql.Query(() => VirtualNetwork, { nullable: true })
  async virtualNetwork(
    @graphql.Args() args: VirtualNetworkFindUniqueArgs
  ): Promise<VirtualNetwork | null> {
    const result = await this.service.virtualNetwork(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VirtualNetwork)
  async createVirtualNetwork(
    @graphql.Args() args: CreateVirtualNetworkArgs
  ): Promise<VirtualNetwork> {
    return await this.service.createVirtualNetwork({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VirtualNetwork)
  async updateVirtualNetwork(
    @graphql.Args() args: UpdateVirtualNetworkArgs
  ): Promise<VirtualNetwork | null> {
    try {
      return await this.service.updateVirtualNetwork({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VirtualNetwork)
  async deleteVirtualNetwork(
    @graphql.Args() args: DeleteVirtualNetworkArgs
  ): Promise<VirtualNetwork | null> {
    try {
      return await this.service.deleteVirtualNetwork(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SecurityOperationsCenter], {
    name: "securityOperationsCenters",
  })
  async findSecurityOperationsCenters(
    @graphql.Parent() parent: VirtualNetwork,
    @graphql.Args() args: SecurityOperationsCenterFindManyArgs
  ): Promise<SecurityOperationsCenter[]> {
    const results = await this.service.findSecurityOperationsCenters(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [VirtualDesktop], { name: "virtualDesktops" })
  async findVirtualDesktops(
    @graphql.Parent() parent: VirtualNetwork,
    @graphql.Args() args: VirtualDesktopFindManyArgs
  ): Promise<VirtualDesktop[]> {
    const results = await this.service.findVirtualDesktops(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
