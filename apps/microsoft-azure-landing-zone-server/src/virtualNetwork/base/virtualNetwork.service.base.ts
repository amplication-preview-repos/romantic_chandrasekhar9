/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VirtualNetwork as PrismaVirtualNetwork,
  SecurityOperationsCenter as PrismaSecurityOperationsCenter,
  VirtualDesktop as PrismaVirtualDesktop,
} from "@prisma/client";

export class VirtualNetworkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VirtualNetworkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.virtualNetwork.count(args);
  }

  async virtualNetworks(
    args: Prisma.VirtualNetworkFindManyArgs
  ): Promise<PrismaVirtualNetwork[]> {
    return this.prisma.virtualNetwork.findMany(args);
  }
  async virtualNetwork(
    args: Prisma.VirtualNetworkFindUniqueArgs
  ): Promise<PrismaVirtualNetwork | null> {
    return this.prisma.virtualNetwork.findUnique(args);
  }
  async createVirtualNetwork(
    args: Prisma.VirtualNetworkCreateArgs
  ): Promise<PrismaVirtualNetwork> {
    return this.prisma.virtualNetwork.create(args);
  }
  async updateVirtualNetwork(
    args: Prisma.VirtualNetworkUpdateArgs
  ): Promise<PrismaVirtualNetwork> {
    return this.prisma.virtualNetwork.update(args);
  }
  async deleteVirtualNetwork(
    args: Prisma.VirtualNetworkDeleteArgs
  ): Promise<PrismaVirtualNetwork> {
    return this.prisma.virtualNetwork.delete(args);
  }

  async findSecurityOperationsCenters(
    parentId: string,
    args: Prisma.SecurityOperationsCenterFindManyArgs
  ): Promise<PrismaSecurityOperationsCenter[]> {
    return this.prisma.virtualNetwork
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .securityOperationsCenters(args);
  }

  async findVirtualDesktops(
    parentId: string,
    args: Prisma.VirtualDesktopFindManyArgs
  ): Promise<PrismaVirtualDesktop[]> {
    return this.prisma.virtualNetwork
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .virtualDesktops(args);
  }
}
